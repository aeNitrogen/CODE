---
# Slurm config bwuni gpu
name: "SLURM"   # MUST BE "SLURM"
partition: "gpu_8"  # "single" for cpu, "gpu_4" or gpu_8" for gpu
job-name: "test_uc" # this will be the experiment's name in slurm
num_parallel_jobs: 30  # max number of jobs executed in parallel
ntasks: 1   #  leave that like it is
cpus-per-task: 4   # there are 5 cores for each GPU on the gpu_8 queue and 10 per GPU on the gpu_4 queue. Never use 5! don't ask why!
mem-per-cpu: 2250 # in mb
time: 20   # in minutes
sbatch_args:   # gpus need to be explicitly requested using this
  gres: "gpu:1" #and this (specifies number of gpus requested)

---
name: DEFAULT
iterations: 3000
run_cap: 40
method: "random"
metric:
  name: "validation_loss"
  goal: "minimize"
parameters:
  seed: 8055
  architecture: "transformer"
  learning_rate:
    distribution: "q_log_uniform"
    min: 0.00001
    max: 0.2

  # cause of actions start token len has to be overlap + pred len
  overlap:
    values: [0, 5, 20, 50]
  prediction_length: 500
  lookback_window: 150

  # _______PatchTST_______

  fc_dropout: 0.05
  head_dropout: 0.0
  patch_length: 16
  stride: 8
  padding_patch: "end"
  revin: 1
  affine: 0
  subtract_last: 0
  decomposition: 0
  kernel_size: 25
  individual: 0 # individual head; True 1 False 0

  # _______Formers_______

  embed_type: 0 # 0: default 1: value embedding + temporal embedding + positional embedding 2: value embedding + temporal embedding 3: value embedding + positional embedding 4: value embedding
  # input_dim: # depends on data, done in code
  output_size: 9 # depends on data and task
  d_model:
    values: [ 256, 512, 1024, 2048, 4096, 8192 ]
  n_heads: 4
  encoder_layers: 2
  decoder_layers: 1
  d_fcn: 2048 # [512, 1024, 2048, 4096]?
  moving_average: 25 # try 5, 50, 100
  distilling: True # attention distilling in encoder
  dropout:
    values: [ 0, 0.1, 0.3, 0.5 ]
  embed: "timeF" # options [timeF, fixed, learned]
  activation: "gelu" # options "relu", "gelu"
  output_attention: False